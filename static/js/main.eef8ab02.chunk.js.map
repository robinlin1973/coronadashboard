{"version":3,"sources":["data/covid.csv","views/View1/index.js","charts/util.js","views/View2/index.js","charts/RaceLine/index.js","views/View3/index.js","charts/WorldBubbleChart/index.js","views/View7/index.js","Dashboard.js","index.js"],"names":["module","exports","View1","handleDoubleClick","record","rowIndex","props","onCountryChanged","country","data","this","date","total","today","Date","closest","reduce","a","b","latest_data","filter","row","helper","sums","r","o","key","confirmed","parseInt","recovered","deaths","Object","assign","push","map","d","sort","console","log","id","className","columns","title","dataIndex","dataSource","onRow","onDoubleClick","event","Component","findCountryData","groups","grouped","result","forEach","g","i","length","countrydata","error","latestCountry","selectedCountry","latest","province","active","summarizeCountry","View2","render","text","JSON","parse","stringify","summary","CoronaLine","drawsvg","d3","refs","anchorLine","selectAll","remove","width","height","svg","attr","parseDate","timeParse","x","range","y","color","sumcountry","linedata","rawcountry","keys","index","item","acc","obj","xAxis","tickFormat","yAxis","line","price","curve","companies","cols","category","domain","c","values","v","append","call","enter","on","style","each","includes","name","totalLength","getTotalLength","transition","duration","ease","legend","mouseG","lines","document","getElementsByClassName","mousePerLine","mouse","beginning","end","target","Math","floor","pos","getPointAtLength","select","invert","toFixed","ref","View3","overflowX","overflowY","CoronaBubble","lDate","latestDate","state","datatype","anchor","projection","path","tip","d3Tip","direction","html","properties","linear_color","topojson","world","objects","units","features","join","number","offsetX","offsetY","node","show","hide","legendLinear","legendColor","shapeWidth","labelFormat","cells","orient","scale","sqrt","drawmap","View7","Sider","Layout","Content","Dashboard","coronadata","handleCountryChanged","setState","Promise","all","rawdata","then","alert","catch","err","backgroundColor","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.eef8ab02.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/covid.f27c17a4.csv\";","import React, { Component } from 'react';\r\n//import { Avatar } from 'antd';\nimport './view1.css';\r\nimport { Table } from 'antd';\n//import * as d3 from 'd3';\n\n\r\nexport default class View1 extends Component {\r\n    handleDoubleClick=(record, rowIndex)=>{\n//        console.log(record.country);\n        this.props.onCountryChanged(record.country);\n    }\n    render() {\r\n        const columns = [\n          {\n            title: 'Country',\n            dataIndex: 'country',\n            key: 'country',\n//            render: text => <a>{text}</a>,\n          },\n          {\n            title: 'Deaths',\n            dataIndex: 'deaths',\n            key: 'deaths',\n          },\n//          {\n//            title: 'Confirmed',\n//            dataIndex: 'confirmed',\n//            key: 'confirmed',\n//          },\n//         {\n//            title: 'Recovered',\n//            dataIndex: 'recovered',\n//            key: 'recovered',\n//          },\n        ];\n\n\n        const {data} = this.props;\n        let date = null,total = 0;\n\n\n        if(data!=null)\n        {\n            const today = new Date();\n            const closest = data.reduce((a, b) => a.Date - today < b.Date - today ? a : b);\n            date= closest.date;\n            const latest_data = data.filter((row)=>{return(row.date===date);});\n\n            var  helper = {};\n            var sum_by_country = latest_data.reduce(function(r, o) {\n              var key = o.country;\n\n              if(!helper[key]) {\n                helper[key] = Object.assign({}, o); // create a copy of o\n                r.push(helper[key]);\n              } else {\n                helper[key].confirmed = parseInt(helper[key].confirmed) + parseInt(o.confirmed);\n                helper[key].recovered = parseInt(helper[key].recovered) + parseInt(o.recovered);\n                helper[key].deaths = parseInt(helper[key].deaths) + parseInt(o.deaths);\n              }\n\n              return r;\n            }, []);\n\n            var sums = sum_by_country.map(function(d) {\n              return {\n                country: d.country,\n                deaths: d.deaths,\n                confirmed: d.confirmed,\n                recovered: d.recovered,\n              }\n            });\n            sums.sort(function(a,b) {\n                return b.confirmed-a.confirmed;\n            });\n            total= sums.reduce((a, b) => +a + +b.confirmed, 0);;\n            console.log(total);\n        }//if(data!=null)\n\n\n\n        return (\r\n            <div id='view1' className='pane'>\r\n                <div className='confirmed'>Confirmed:</div>\n                <div><span className='total'>{total}</span> until <span className='date'>{date}</span></div>\n                <Table columns={columns} dataSource={sums}\n                      onRow={(record, rowIndex) => {\n                      return {\n                          onDoubleClick: event => {this.handleDoubleClick(record, rowIndex)} // double click row\n                        };\n                      }}\n                />\n            </div>\r\n        )\r\n    }//render\n}\r\n\n\n","function groupBy(list, keyGetter) {\n    const map = new Map();\n    list.forEach((item) => {\n         const key = keyGetter(item);\n         const collection = map.get(key);\n         if (!collection) {\n             map.set(key, [item]);\n         } else {\n             collection.push(item);\n         }\n    });\n    return map;\n}\n\n\nfunction findCountryData(data,country,date){\n\n    const groups = ['country', 'date'];\n    var grouped = {};\n    var result = {\"confirmed\":0,\"recovered\":0,\"deaths\":0,\"active\":0}\n\n    data.forEach(function (a) {\n        groups.reduce(function (o, g, i) {  // take existing object,\n            o[a[g]] = o[a[g]] || (i + 1 === groups.length ? [] : {}); // or generate new obj, or\n            return o[a[g]];                                           // at last, then an array\n        }, grouped).push(a);\n    });\n\n\n    try{\n        var countrydata=grouped[country][date];\n        var confirmed=0,deaths=0,recovered=0;\n        if(!countrydata || countrydata.length === 0) {return result;}\n        countrydata.forEach(record=>{\n            confirmed = confirmed+parseInt(record['confirmed']);\n            deaths = deaths+parseInt(record['deaths']);\n            recovered = recovered+parseInt(record['recovered']);\n        });\n//        console.log(confirmed,deaths,recovered);\n    }catch(error){\n//        console.log(\"error \", country, date,error);\n        return result;\n    };\n\n//    if(datatype==='deaths'){\n////        if(country==='China'){\n////            console.log('deaths ', country, date,datatype,data)\n////\n////        }\n//        return deaths;\n//    }else if(datatype==='recovered'){\n////        console.log('recovered ', recovered)\n//        return recovered;\n//    }else if(datatype==='hospitalized'){\n//        var hospitalized =confirmed-deaths-recovered;\n////        console.log('hospitalized ', hospitalized)\n//        return hospitalized;\n//    }else{\n////        console.error(\"no matched datadype\");\n//        return 0;\n//    }\n\n    result = {\"confirmed\":confirmed,\"recovered\":recovered,\"deaths\":deaths,\"active\":(confirmed-recovered-deaths)};\n\n    return result;\n\n\n}\n\nfunction latestDate(data){\n    const today = new Date();\n    const closest = data.reduce((a, b) => a.Date - today < b.Date - today ? a : b);\n\n    return closest.date;\n}\n\n\nfunction latestCountry(data,selectedCountry){\n    const today = new Date();\n    const closest = data.reduce((a, b) => a.Date - today < b.Date - today ? a : b);\n    const date= closest.date;\n    const latest_data = data.filter((row)=>{return(row.date===date && row.country=== selectedCountry);});\n    console.log(date,selectedCountry,latest_data);\n\n    var latest = latest_data.map(function(d) {\n      return {\n        province: d.province,\n        deaths: d.deaths,\n        confirmed: d.confirmed,\n        recovered: d.recovered,\n        active:parseInt(d.confirmed) - parseInt(d.deaths) - parseInt(d.recovered),\n      }\n    });\n\n    latest.sort(function(a,b) {\n        return b.confirmed-a.confirmed;\n    });\n    console.log(\"latest\",latest);\n    return latest;\n\n}\n\nfunction summarizeCountry(data,selectedCountry){\n    var latest = latestCountry(data,selectedCountry);\n    var confirmed = latest.reduce((a, b) => +a + +b.confirmed, 0);\n    var recovered = latest.reduce((a, b) => +a + +b.recovered, 0);\n    var deaths = latest.reduce((a, b) => +a + +b.deaths, 0);\n    var active = confirmed-recovered-deaths;\n    var summary={\"confirmed\":confirmed,\"recovered\":recovered,\"deaths\":deaths,\"active\":active};\n//    console.log(\"summary\",selectedCountry,summary);\n    return summary;\n}\n\n\n\nfunction findMax(data, datatype){\n    var grouped = {};\n    const groups = ['country', 'date'];\n\n\n    data.forEach(function (a) {\n        groups.reduce(function (o, g, i) {  // take existing object,\n            o[a[g]] = o[a[g]] || (i + 1 === groups.length ? [] : {}); // or generate new obj, or\n            return o[a[g]];                                           // at last, then an array\n        }, grouped).push(a);\n    });\n\n//    console.log(\"findMax\",grouped);\n}\n\n\nexport {groupBy,findCountryData,findMax,summarizeCountry,latestCountry,latestDate};\n","import React, { Component } from 'react';\r\n//import { Avatar } from 'antd';\nimport './view2.css';\r\nimport { Table } from 'antd';\n//import * as d3 from 'd3';\nimport {summarizeCountry,latestCountry} from \"../../charts/util.js\"\n\n\r\nexport default class View2 extends Component {\r\n\n    render() {\r\n\n        const columns = [\n          {\n            title: 'State/Pro',\n            dataIndex: 'province',\n            key: 'province',\n            render: text => <a>{text}</a>,\n          },\n          {\n            title: 'Deaths',\n            dataIndex: 'deaths',\n            key: 'deaths',\n          },\n          {\n            title: 'Confirmed',\n            dataIndex: 'confirmed',\n            key: 'confirmed',\n          },\n            {\n            title: 'Active',\n            dataIndex: 'active',\n            key: 'active',\n          },\n//         {\n//            title: 'Recovered',\n//            dataIndex: 'recovered',\n//            key: 'recovered',\n//          },\n        ];\n\n        var data = JSON.parse(JSON.stringify(this.props.data));\n        const {selectedCountry} = this.props;\n        let date = null;\n\n\n        if(data!=null)\n        {\n            var latest = latestCountry(data,selectedCountry);\n            var summary = summarizeCountry(data,selectedCountry);\n        }//if(data!=null)\n\n        return (\r\n            <div id='view2' className='pane'>\r\n                <div className='countrytitle'>{this.props.selectedCountry} Detail:</div>\n                <div><span className='total'>{summary.confirmed}</span> until <span className='date'>{date}</span></div>\n                <Table columns={columns} dataSource={latest} />\n            </div>\r\n        )\r\n    }//render\n}\n\n\n","import React , { Component }from 'react';\n//import { BarStack } from '@vx/shape';\n//import { Group } from '@vx/group';\n//import { Grid } from '@vx/grid';\n//import { AxisBottom } from '@vx/axis';\n//import { cityTemperature } from '@vx/mock-data';\n//import { scaleBand, scaleLinear, scaleOrdinal } from '@vx/scale';\nimport { timeParse } from 'd3-time-format';\n//import { withTooltip, Tooltip } from '@vx/tooltip';\n//import { LegendOrdinal } from '@vx/legend';\n//import {groupBy} from '../util.js'\nimport * as d3 from 'd3';\n\n\nclass CoronaLine extends Component{\n   componentDidMount() {\n       console.log(\"CoronaLine:componentDidMount()\")\n       this.drawsvg();\n\n\n    }\n\n    componentDidUpdate() {\n        console.log(\"CoronaLine:componentDidUpdate()\");\n        d3.select(this.refs.anchorLine).selectAll('g').remove();\n        this.drawsvg();\n    }\n\n    drawsvg(){\n        console.log(\"CoronaLine:drawsvg()\")\n        var { width, height,data } = this.props;\n        var svg = d3.select(this.refs.anchorLine)\n                    .attr(\"transform\", \"translate(100,15)\");\n\n        var margin = {top: 20, right: 50, bottom: 30, left: 100};\n        width = width - margin.left - margin.right;\n        height = height - margin.top - margin.bottom;\n\n        const parseDate = timeParse('%m/%d/%Y');//01/22/2020\n\n        var x = d3.scaleTime().range([0, width]);\n\n        var y =  d3.scaleLinear().range([height, 0]);\n\n        const color=['#ff8424','#efb01d','#a44afe'];\n\n        // sum the data for each country and date\n        const groups=[\"country\",\"date\"];\n        const columns=['confirmed','recovered','deaths'];\n        var grouped = {};\n        var sumcountry = {};\n        var linedata = JSON.parse(JSON.stringify(data));\n\n        linedata.forEach(function (a) {\n            groups.reduce(function (o, g, i) {  // take existing object,\n                o[a[g]] = o[a[g]] || (i + 1 === groups.length ? [] : {}); // or generate new obj, or\n                return o[a[g]];                                           // at last, then an array\n            }, grouped).push(a);\n        });\n\n        var rawcountry = grouped[this.props.selectedCountry];\n\n        Object.keys(rawcountry).forEach(function(key,index) {\n            var item ={};\n            columns.forEach((i)=>{\n                item[i]=rawcountry[key].reduce(function(acc,obj){return acc+parseInt(obj[i])},0);\n            });\n            sumcountry[key]= item;\n        });\n        // sum the data for each country and date\n\n        var xAxis = d3.axisBottom(x).tickFormat(d3.timeFormat(\"%Y-%m-%d\"));\n        var yAxis = d3.axisLeft(y);\n\n        var line = d3.line()\n            .x(function(d) { return x(d.date); })\n            .y(function(d) { return y(d.price); })\n            .curve(d3.curveCardinal);\n\n          linedata.forEach(function(d) {\n            d.date = parseDate(d.date);\n          });\n\n          var companies = [];\n          const cols= ['active','recovered','deaths'];\n          cols.forEach((category,index)=>{\n              let obj=[];\n              for (var date in sumcountry){\n                  if(category === 'active'){\n                      var con = parseInt(sumcountry[date][\"confirmed\"]);\n                      var rec = parseInt(sumcountry[date][\"recovered\"]);\n                      var det = parseInt(sumcountry[date][\"deaths\"]);\n                      var active = (con-rec-det);\n//                      console.log(sumcountry[date]);\n                      obj.push({\"date\":parseDate(date),\"price\":active});\n                  }else{\n                    obj.push({\"date\":parseDate(date),\"price\":parseInt(sumcountry[date][category])});\n                  }\n              }\n              companies.push({\"name\":category,\"values\":obj});\n          });\n//          console.log(companies);\n\n          x.domain(d3.extent(linedata, function(d) { return d.date; }));\n          y.domain([\n            d3.min(companies, function(c) { return d3.min(c.values, function(v) { return v.price; }); }),\n            d3.max(companies, function(c) { return d3.max(c.values, function(v) { return v.price; }); })\n          ]);\n\n        svg.append(\"g\")\n            .attr(\"class\", \"x axis\")\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\n            .call(xAxis);\n\n        svg.append(\"g\")\n            .attr(\"class\", \"y axis\")\n            .attr(\"transform\", \"translate(0)\")\n            .call(yAxis);\n\n\n        svg.append(\"line\")\n            .attr(\n            {\n                \"class\":\"horizontalGrid\",\n                \"x1\" : 0,\n                \"x2\" : width,\n                \"y1\" : y(0),\n                \"y2\" : y(0),\n                \"shape-rendering\" : \"crispEdges\",\n                \"stroke\" : \"black\",\n                \"stroke-width\" : \"1px\",\n                \"stroke-dasharray\": (\"3, 3\")\n            });\n\n\n        svg.selectAll(\".raceline\")\n            .data(companies)\n            .enter().append(\"g\")\n            .attr(\"class\", \"raceline\")\n            .on(\"click\",()=>{console.log(\"clicked\");});\n\n\n\n        var path = svg.selectAll(\".raceline\").append(\"path\")\n            .attr(\"class\", \"line\")\n            .attr(\"d\", function(d,index) {\n              return line(d.values); })\n            .style(\"stroke\", function(d,i) {\n              return color[i];\n            });\n\n        path.each(function(d,i) {\n            if(columns.includes(d.name)){\n                var totalLength = this.getTotalLength();\n                d3.select(this)\n                .attr(\"stroke-dasharray\", totalLength + \" \" + totalLength )\n                .attr(\"transform\", \"translate(0)\")\n                .on('click',()=>{\n                    d3.select(this).attr(\"stroke-dashoffset\", totalLength)\n                      .transition()\n                      .duration(2000)\n                      .ease(d3.easeLinear)\n                      .attr(\"stroke-dashoffset\", 0);\n                });\n\n            }\n        });\n\n          var legend = svg.selectAll('g .legend')\n              .data(cols)\n              .enter()\n            .append('g')\n              .attr('class', 'legend');\n\n          legend.append('rect')\n              .attr('x', 30)\n              .attr('y', function(d, i){ return i *  30;})\n              .attr('width', 20)\n              .attr('height', 20)\n              .style('fill', function(d,i) {\n                return color[i];\n              });\n\n          legend.append('text')\n              .attr('x', 60)\n              .attr('y', function(d, i){ return (i *  30) + 15;})\n              .text(function(d){ return d; });\n\n\n    // append a g for all the mouse over nonsense\n    var mouseG = svg.append(\"g\")\n      .attr(\"class\", \"mouse-over-effects\");\n\n    // this is the vertical line\n    mouseG.append(\"path\")\n      .attr(\"class\", \"mouse-line\")\n      .style(\"stroke\", \"black\")\n      .style(\"stroke-width\", \"1px\")\n      .style(\"opacity\", \"0\");\n\n    // keep a reference to all our lines\n    var lines = document.getElementsByClassName('line');\n\n    // here's a g for each circle and text on the line\n    var mousePerLine = mouseG.selectAll('.mouse-per-line')\n      .data(d3.range(lines.length))\n      .enter()\n      .append(\"g\")\n      .attr(\"class\", \"mouse-per-line\");\n\n    // the circle\n    mousePerLine.append(\"circle\")\n      .attr(\"r\", 7)\n      .style(\"stroke\", function(d) {\n        return 'black';\n      })\n      .style(\"fill\", \"none\")\n      .style(\"stroke-width\", \"1px\")\n      .style(\"opacity\", \"0\");\n\n    // the text\n    mousePerLine.append(\"text\")\n      .attr(\"transform\", \"translate(10,3)\");\n\n    // rect to capture mouse movements\n    mouseG.append('svg:rect')\n      .attr('width', width)\n      .attr('height', height)\n      .attr('fill', 'none')\n      .attr('pointer-events', 'all')\n      .on('mouseout', function() { // on mouse out hide line, circles and text\n        d3.select(\".mouse-line\")\n          .style(\"opacity\", \"0\");\n        d3.selectAll(\".mouse-per-line circle\")\n          .style(\"opacity\", \"0\");\n        d3.selectAll(\".mouse-per-line text\")\n          .style(\"opacity\", \"0\");\n      })\n      .on('mouseover', function() { // on mouse in show line, circles and text\n        d3.select(\".mouse-line\")\n          .style(\"opacity\", \"1\");\n        d3.selectAll(\".mouse-per-line circle\")\n          .style(\"opacity\", \"1\");\n        d3.selectAll(\".mouse-per-line text\")\n          .style(\"opacity\", \"1\");\n      })\n      .on('mousemove', function() { // mouse moving over canvas\n        var mouse = d3.mouse(this);\n\n        // move the vertical line\n        d3.select(\".mouse-line\")\n          .attr(\"d\", function() {\n            var d = \"M\" + mouse[0] + \",\" + height;\n            d += \" \" + mouse[0] + \",\" + 0;\n            return d;\n          });\n\n        // position the circle and text\n        d3.selectAll(\".mouse-per-line\")\n          .attr(\"transform\", function(d, i) {\n//            var xDate = x.invert(mouse[0]);\n\n            // since we are use curve fitting we can't relay on finding the points like I had done in my last answer\n            // this conducts a search using some SVG path functions\n            // to find the correct position on the line\n            // from http://bl.ocks.org/duopixel/3824661\n            var beginning = 0,\n                end = lines[i].getTotalLength(),\n                target = null;\n\n            while (true){\n              target = Math.floor((beginning + end) / 2);\n              var pos = lines[i].getPointAtLength(target);\n              if ((target === end || target === beginning) && pos.x !== mouse[0]) {\n                  break;\n              }\n              if (pos.x > mouse[0])      end = target;\n              else if (pos.x < mouse[0]) beginning = target;\n              else break; //position found\n            }\n\n            // update the text with y value\n            d3.select(this).select('text')\n              .text(y.invert(pos.y).toFixed(0));\n\n            // return position\n            return \"translate(\" + mouse[0] + \",\" + pos.y +\")\";\n          });\n      });\n\n\n    }\n\n    render(){\n        console.log(\"CoronaLine:render()\");\n\n        const {data} = this.props;\n\n        if(!data){\n            return null;\n        }\n        return <g ref=\"anchorLine\" />;\n    }\n}\n\nexport default CoronaLine;\n\n\n","import React, { Component } from 'react';\r\n//import MapChart from '../../charts/MapChart';\nimport CoronaLine from '../../charts/RaceLine';\n\r\nimport './view3.css';\n\r\nexport default class View3 extends Component {\n    render() {\r\n        const {data,selectedCountry} = this.props;\n        console.log(\"view3\",this.props.selectedCountry);\n        return (\r\n            <div id='view3' className='pane'>\r\n                <div style={{ overflowX: 'scroll',overflowY:'hidden' }}>\n                        <svg id=\"linesvg\" width={900} height={300} selectedCountry={selectedCountry}>\n                            <CoronaLine width={900} height={300} data={data} selectedCountry={selectedCountry}/>\n                        </svg>\n                </div>\n            </div>\r\n        )\r\n    }\r\n}\n","import React, {Component} from 'react';\n// import queue from 'queue';\n// import topojson from 'topojson';\n// import all of topojson?????\nimport * as topojson from 'topojson';\nimport * as d3 from 'd3';\nimport {findCountryData,summarizeCountry,latestDate} from '../util.js';\n//import {createHistorySlider} from './createHistorySlider.js';\nimport world from '../../data/world-topo.json';\n//import world from '../../data/countries_geo.json';\n//import { timeParse, timeFormat } from 'd3-time-format';\nimport { legendColor } from 'd3-svg-legend';\nimport d3Tip from \"d3-tip\";\nimport './style.css';\n\n\nclass CoronaBubble extends Component {\n//    state = {\n//        date:'03/24/2020',\n//        datatype:'deaths',\n//    };\n\n    constructor(props) {\n      super(props);\n      var lDate = latestDate(this.props.data);\n      this.state = { date: lDate, datatype:'deaths' };\n    }\n\n    drawmap()\n    {\n        console.log(\"CoronaBubble:drawmap\");\n        const svg = d3.select(this.refs.anchor),{data } = this.props;\n        const projection = d3.geoMercator();\n        const path = d3.geoPath(projection);\n//        const date = this.state.date;\n        const groups = ['country', 'date'];\n        var grouped = {};\n//        const format = timeFormat('%m/%d/%Y');\n//        var timer = null;\n//        var isPlaying = false;\n//\n//        var slider = createHistorySlider(\n//            '#dateslider',width-200,80,'01/22/2020',this.state.date,(date)=>{\n//                const d = format(date);\n//\n//                this.setState({\n//                    date:d,\n//                })\n//        });\n\n        var tip = d3Tip()\n          .attr('class', 'd3-tip')\n          .direction('s')\n          .html(function(d) {\n            var country = d.properties['name'];\n            var summary =  summarizeCountry(data,country);\n\n            var tipstring = \"<strong>\"+country+\"</strong><br>\"+\"<strong>Confirmed:</strong><span style='color:red'>\" + summary.confirmed + \"</span><br>\"+\"<strong>deaths:</strong><span style='color:red'>\" + summary.deaths + \"</span><br>\"+\"<strong>active:</strong><span style='color:red'>\" + summary.active + \"</span><br>\"+\"<strong>recovered:</strong><span style='color:red'>\" + summary.recovered + \"</span><br>\";\n\n            return tipstring;\n          })\n\n\n//        d3.select(\"#play\")\n//              .attr(\"title\",\"Play animation\")\n//              .on(\"click\",function(){\n//                if ( !isPlaying ){\n//                  d3.select(this).classed(\"pause\",true).attr(\"title\",\"Pause animation\");\n//                  timer = setInterval(step, 100);\n////                  isPlaying = true;\n//                } else {\n//                  clearInterval(timer);\n//                  d3.select(this).classed(\"pause\",false).attr(\"title\",\"Play animation\");\n////                  isPlaying = false;\n//                }\n//              });\n\n        data.forEach(function (a) {\n            groups.reduce(function (o, g, i) {  // take existing object,\n                o[a[g]] = o[a[g]] || (i + 1 === groups.length ? [] : {}); // or generate new obj, or\n                return o[a[g]];                                           // at last, then an array\n            }, grouped).push(a);\n        });\n\n        d3.selectAll(\"#worldgroup,.legendLinear\").remove();\n        const g = svg.append( \"g\" ).attr(\"id\",\"worldgroup\");\n\n\n        var linear_color = d3.scaleThreshold()\n            .domain([100,500,1000,2000,5000,10000,20000,50000,100000])\n            .range(d3.schemeBlues[9]);\n\n\n//        findMax(data, \"confirmed\");\n\n        g.append('circle')\n            .attr('id', 'tipfollowscursor')\n            .attr('r',15)\n            .style(\"opacity\", 0.0)\n            .attr('fill','red');\n        g.call(tip);\n        g.selectAll(\"path .worldpath\")\n          .data(topojson.feature(world, world.objects.units).features)\n          .call(tip)\n           .join(\"path\")\n            .attr(\"fill\", (d)=>{\n                    var country =d.properties['name'];\n////                    var summ = summarizeCountry(data,country);\n                    var number = findCountryData(data,country,this.state.date)[this.state.datatype];\n                    var color = linear_color(number);\n                    return color;\n                })\n            .attr(\"class\",\"worldpath\")\n            .attr(\"id\",d => d.properties['name'])\n            .attr(\"stroke\", \"black\")\n            .attr(\"stroke-linejoin\", \"round\")\n            .attr(\"d\", path)\n//            .on('mouseover', tip.show)\n            .on('mouseover', function (d) {\n                var target = d3.select('#tipfollowscursor')\n                    .attr('cx', d3.event.offsetX)\n                    .attr('cy', d3.event.offsetY - 5) // 5 pixels above the cursor\n                    .node();\n                tip.show(d, target);\n            })\n            .on('mouseout', tip.hide);\n//            .append(\"title\")\n//              .text(d => d.properties['name']);\n\n\n// add zoom funtion for map\n//        var zoom = d3.zoom()\n//              .scaleExtent([1, 10])\n//              .on('zoom', function() {\n//                  d3.selectAll('#worldgroup,#circledgroup')\n//                   .attr('transform', d3.event.transform);\n//        });\n//\n//        svg.call(zoom);\n\n//        function step(){\n//            var currentdate = new Date(slider.value());\n//            var maxdate= new Date(slider.max());\n//            var mindate= new Date(slider.min());\n//\n//            if(currentdate < maxdate){\n//                currentdate.setDate(currentdate.getDate() + 1);\n//                const startdate = format(currentdate);\n//            }else{\n//                currentdate = mindate;\n//                clearInterval(timer);\n//                d3.select(\"#play\").classed(\"pause\",false).attr(\"title\",\"Play animation\");\n//            }\n//            slider.value(currentdate);\n//        }\n//\n//        d3.select('#datatype').on('change',()=>{\n//            var e = document.getElementById(\"datatype\")\n//            this.setState({datatype:e.options[e.selectedIndex].text});\n//        });\n\n        svg.append(\"g\")\n          .attr(\"class\", \"legendLinear\")\n          .attr(\"transform\", \"translate(30,250)\");\n\n        var legendLinear = legendColor()\n          .shapeWidth(30)\n//          .title(\"Corona cases by country\")\n          .labelFormat(d3.format(\".0f\"))\n          .cells(10)\n          .orient('vertical')\n          .scale(linear_color);\n\n        svg.select(\".legendLinear\")\n          .call(legendLinear);\n\n        //todo when change the selected country, try to show the tip of that country.\n//        console.log(\"CoronaBubble:drawmap:\",this.props.selectedCountry);\n//        var evt = new MouseEvent(\"mouseover\");\n//        document.getElementById(this.props.selectedCountry).dispatchEvent(evt);\n\n    }//drawmap\n\n\n    drawbubble(){\n        console.log(\"CoronaBubble:drawbubble\");\n        const svg = d3.select(this.refs.anchor),\n        { data } = this.props;\n//        const world = this.state.worldData;\n        const groups = ['country', 'date'];\n        const projection = d3.geoMercator();\n        var grouped = {};\n\n        data.forEach(function (a) {\n            groups.reduce(function (o, g, i) {  // take existing object,\n                o[a[g]] = o[a[g]] || (i + 1 === groups.length ? [] : {}); // or generate new obj, or\n                return o[a[g]];                                           // at last, then an array\n            }, grouped).push(a);\n        });\n\n        const color={\n                        \"deaths\":'#ff8424',\n                        \"active\":'#efb01d',\n                        \"recovered\":'#a44afe'\n                    };\n\n        svg.selectAll(\"#circledgroup\").remove();\n        const g = svg.append( \"g\" ).attr(\"id\",\"circledgroup\");\n        g.selectAll(\".worldcircle\")\n          .data(topojson.feature(world, world.objects.units).features)\n//          .data(world.features)\n          .enter()\n          .append(\"circle\")\n          .attr(\"r\",(d)=>{\n                var country = d.properties['name'];\n                return Math.sqrt(findCountryData(grouped,country,this.state.date)[this.state.datatype])/2;\n            })\n          .attr(\"fill\",color[this.state.datatype])\n          .style(\"opacity\", 0.2)\n          .attr(\"class\",\"worldcircle\")\n          .attr(\"transform\",function(d){\n            var p = projection(d3.geoCentroid(d)); //<-- centroid is the center of the path, projection maps it to pixel positions\n            return \"translate(\"+p+\")\";\n          });\n\n    }//drawbubble\n\n    componentDidMount() {\n        console.log(\"CoronaBubble:componentDidMount\")\n        this.drawmap();\n//        this.drawbubble();\n\n    }\n\n    componentDidUpdate() {\n        console.log(\"CoronaBubble:componentDidUpdate\");\n//        this.drawbubble();\n        this.drawmap();\n\n    }\n\n    render() {\n        console.log(\"CoronaBubble:render\");\n//        const { worldData }  = this.state;\n\n//        if(!world) {return null}\n\n\n        return <g ref=\"anchor\" />;\n    }\n}\n\nexport default CoronaBubble;\n","import React, { Component } from 'react';\n//import MapChart from '../../charts/MapChart';\nimport CoronaBubble from '../../charts/WorldBubbleChart';\n//import RaceBubble from '../../charts/RaceBubble';\n//import * as d3 from 'd3';\nimport './view7.css';\n\nexport default class View7 extends Component {\n\n    render() {\n        const {data,selectedCountry} = this.props;\n\n        return (\n            <div id='view7' className='pane'>\n                <div style={{ overflowX: 'scroll',overflowY:'hidden' }}>\n                        <svg width=\"1000\" height=\"580\">\n                            <CoronaBubble  data={data} selectedCountry={selectedCountry}/>\n                        </svg>\n                </div>\n            </div>\n        )\n    }\n}\n\n","import React, { Component } from 'react';\r\n//import { Layout,Row,Col,Tabs } from 'antd';\nimport { Layout} from 'antd';\nimport View1 from './views/View1';\r\nimport View2 from './views/View2';\r\nimport View3 from './views/View3';\r\n//import View4 from './views/View4';\n//import View5 from './views/View5';\n//import View6 from './views/View6';\nimport View7 from './views/View7';\n//import View8 from './views/View8';\nimport './dashboard.css';\r\nimport rawdata from './data/covid.csv';\n//import rawdata from 'covid.csv';\nimport * as d3 from 'd3';\n\r\nconst { Sider, Content} = Layout;\n//const {TabPane} = Tabs;\n\r\nexport default class Dashboard extends Component {\r\n\n    state = {\n        coronadata:null,\n        selectedCountry:'United States',\n    }\r\n\n    componentDidMount(){\n\r\n//        //todo update domain based on the max deaths number\n        Promise.all([\n            d3.csv(rawdata)\n        ]).then( ([coronadata]) => {\n            if(coronadata){\n                this.setState({coronadata});\n            }else{\n                alert(\"wrong\")\n            }\n        }).catch(err => alert(err))\n    }\r\n\r\n    handleCountryChanged=(country)=>{\n//        console.log(\"handleCountryChanged\",country);\n        this.setState({selectedCountry: country});\n    }\r\n\r\n    render() {\r\n        const {coronadata} = this.state;\n\n        if(!coronadata){return null;}\n\n\n        return (\r\n            <div>\r\n                <Layout style={{ height: 920 }}>\n                    <Layout>\r\n                        <Sider width={300} style={{backgroundColor:'#eee'}}>\n                            <Content style={{ height: 900 }}>\n                                <View1 data={coronadata} onCountryChanged={this.handleCountryChanged}/>\n                            </Content>\n                        </Sider>\n                        <Layout style={{ height: 900 }}>\n                            <Content style={{ height: 600 }}>\n                                <View7 data={coronadata} selectedCountry={this.state.selectedCountry}/>\n                            </Content>\n                            <Content style={{ height: 300 }}>\n                                <View3 data={coronadata} selectedCountry={this.state.selectedCountry}/>\n                            </Content>\n                        </Layout>\r\n\n                        <Sider width={400} style={{backgroundColor:'#eee'}}>\n                            <View2 data={coronadata} selectedCountry={this.state.selectedCountry}/>\n                        </Sider>\n                    </Layout>\r\n                </Layout>\n            </div>\r\n        )\r\n    }\r\n}\r\n\n//                            <Tabs  type=\"card\">\n//\n//\n//                                <TabPane tab=\"World\" key=\"1\">\n//                                    <Content>\n//                                            <Row id=\"controlpanel\" >\n//                                                <Col span={3}>\n//                                                    <div id=\"play\"></div>\n//                                                    <div><select id=\"datatype\">\n//                                                      <option id='datadeaths' defaultValue value=\"deaths\">deaths</option>\n//                                                      <option value=\"active\">active</option>\n//                                                      <option value=\"recovered\">recovered</option>\n//                                                    </select></div>\n//                                                </Col>\n//                                                <Col span={21}><div id=\"dateslider\"></div></Col>\n//                                            </Row>\n//                                        <View7 data={coronadata}/>\n//                                    </Content>\n//                                </TabPane>\n//\n//                                <TabPane tab=\"US\" key=\"2\">\n//\n//                                </TabPane>\n//\n//                                <TabPane tab=\"China\" key=\"3\">\n//\n//                                </TabPane>\n//\n//                            </Tabs>\n\n\n\n//                                <TabPane tab=\"Bubble\" key=\"2\">\n//                                    <div id=\"yearslider\"></div>\n//                                    <div id=\"yearplay\"></div>\n//                                    <View6 data={coronadata}/>\n//                                </TabPane>\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'antd/dist/antd.css';\r\nimport Dashboard from './Dashboard';\r\n\r\nReactDOM.render(<Dashboard />, document.getElementById('root'));\r\n"],"sourceRoot":""}