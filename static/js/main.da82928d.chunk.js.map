{"version":3,"sources":["data/covid_19_data.csv","views/View1/index.js","charts/util.js","views/View2/index.js","charts/RaceLine/index.js","views/View3/index.js","charts/WorldBubbleChart/index.js","views/View7/index.js","Dashboard.js","index.js"],"names":["module","exports","View1","handleDoubleClick","record","rowIndex","props","onCountryChanged","country","data","this","date","total","today","Date","closest","reduce","a","b","latest_data","filter","row","helper","sums","r","o","key","confirmed","parseInt","recovered","deaths","Object","assign","push","map","d","Math","round","sort","id","className","columns","title","dataIndex","dataSource","onRow","onClick","event","Component","latestDate","latestCountry","selectedCountry","console","log","latest","province","active","summarizeCountry","View2","render","text","JSON","parse","stringify","lDate","summary","CoronaLine","drawsvg","d3","refs","anchorLine","selectAll","remove","width","height","svg","attr","parseDate","timeParse","x","range","y","color","groups","grouped","sumcountry","linedata","forEach","g","i","length","rawcountry","keys","index","item","acc","obj","xAxis","tickFormat","yAxis","line","price","curve","companies","cols","category","domain","c","values","v","append","call","style","enter","on","each","includes","name","totalLength","getTotalLength","transition","duration","ease","legend","mouseG","lines","document","getElementsByClassName","mousePerLine","mouse","beginning","end","target","floor","pos","getPointAtLength","select","invert","toFixed","ref","View3","overflowX","overflowY","CoronaBubble","state","datatype","anchor","projection","center","scale","path","tip","d3Tip","direction","html","properties","linear_color","topojson","world","objects","units","features","join","number","result","countrydata","error","findCountryData","hide","offsetX","offsetY","node","show","legendLinear","legendColor","shapeWidth","labelFormat","orient","labels","legendHelpers","thresholdLabels","drawmap","View7","Sider","Layout","Content","Dashboard","coronadata","handleCountryChanged","setState","Promise","all","rawdata","then","alert","catch","err","backgroundColor","ReactDOM","getElementById"],"mappings":"gy/MAAAA,EAAOC,QAAU,IAA0B,2C,mUCOtBC,E,4MACjBC,kBAAkB,SAACC,EAAQC,GACvB,EAAKC,MAAMC,iBAAiBH,EAAOI,U,uDAE7B,IAAD,OAeEC,EAAQC,KAAKJ,MAAbG,KACHE,EAAO,KAAKC,EAAQ,EAGxB,GAAS,MAANH,EACH,CACI,IAAMI,EAAQ,IAAIC,KACZC,EAAUN,EAAKO,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAEH,KAAOD,EAAQK,EAAEJ,KAAOD,EAAQI,EAAIC,KAC5EP,EAAMI,EAAQJ,KACd,IAAMQ,EAAcV,EAAKW,QAAO,SAACC,GAAO,OAAOA,EAAIV,OAAOA,KAErDW,EAAS,GAiBVC,EAhBiBJ,EAAYH,QAAO,SAASQ,EAAGC,GAClD,IAAIC,EAAMD,EAAEjB,QAWZ,OATIc,EAAOI,IAITJ,EAAOI,GAAKC,UAAYC,SAASN,EAAOI,GAAKC,WAAaC,SAASH,EAAEE,WACrEL,EAAOI,GAAKG,UAAYD,SAASN,EAAOI,GAAKG,WAAaD,SAASH,EAAEI,WACrEP,EAAOI,GAAKI,OAAUF,SAASN,EAAOI,GAAKI,QAAUF,SAASH,EAAEK,UALhER,EAAOI,GAAOK,OAAOC,OAAO,GAAIP,GAChCD,EAAES,KAAKX,EAAOI,KAOTF,IACN,IAGuBU,KAAI,SAASC,GACrC,MAAO,CACL3B,QAAS2B,EAAE3B,QACXsB,OAAOM,KAAKC,MAAMF,EAAEL,QACpBH,UAAWS,KAAKC,MAAMF,EAAER,WACxBE,UAAWO,KAAKC,MAAMF,EAAEN,eAI5BN,EAAKe,MAAK,SAASrB,EAAEC,GACjB,OAAOA,EAAES,UAAUV,EAAEU,aAEzBf,EAAOW,EAAKP,QAAO,SAACC,EAAGC,GAAJ,OAAWD,IAAKC,EAAES,YAAW,GAIpD,OACI,yBAAKY,GAAG,QAAQC,UAAU,QACtB,yBAAKA,UAAU,aAAf,cACA,6BAAK,0BAAMA,UAAU,SAAS5B,GAA9B,UAAkD,0BAAM4B,UAAU,QAAQ7B,IAC1E,kBAAC,IAAD,CAAO8B,QA9DC,CACd,CACEC,MAAO,UACPC,UAAW,UACXjB,IAAK,WAEP,CACEgB,MAAO,SACPC,UAAW,SACXjB,IAAK,WAqDwBkB,WAAYrB,EAC/BsB,MAAO,SAACzC,EAAQC,GAChB,MAAO,CACHyC,QAAS,SAAAC,GAAU,EAAK5C,kBAAkBC,EAAQC,a,GAtEzC2C,a,OC8DnC,SAASC,EAAWxC,GAChB,IAAMI,EAAQ,IAAIC,KAGlB,OAFgBL,EAAKO,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAEH,KAAOD,EAAQK,EAAEJ,KAAOD,EAAQI,EAAIC,KAE7DP,KAmBnB,SAASuC,EAAczC,EAAK0C,GAExB,IAAMtC,EAAQ,IAAIC,KAEZH,EADUF,EAAKO,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAEH,KAAOD,EAAQK,EAAEJ,KAAOD,EAAQI,EAAIC,KACxDP,KACdQ,EAAcV,EAAKW,QAAO,SAACC,GAAO,OAAOA,EAAIV,OAAOA,GAAQU,EAAIb,UAAW2C,KACjFC,QAAQC,IAAI1C,EAAKwC,EAAgBhC,GAEjC,IAAImC,EAASnC,EAAYe,KAAI,SAASC,GACpC,MAAO,CACLoB,SAAUpB,EAAEoB,SACZzB,OAAQK,EAAEL,OACVH,UAAWQ,EAAER,UACbE,UAAWM,EAAEN,UACb2B,OAAO5B,SAASO,EAAER,WAAaC,SAASO,EAAEL,QAAUF,SAASO,EAAEN,eAQnE,OAJAyB,EAAOhB,MAAK,SAASrB,EAAEC,GACnB,OAAOA,EAAES,UAAUV,EAAEU,aAEzByB,QAAQC,IAAI,SAASC,GACdA,EAIX,SAASG,EAAiBhD,EAAK0C,GAE3B,IAAIG,EAASJ,EAAczC,EAAK0C,GAC5BxB,EAAY2B,EAAOtC,QAAO,SAACC,EAAGC,GAAJ,OAAWD,IAAKC,EAAES,YAAW,GACvDE,EAAYyB,EAAOtC,QAAO,SAACC,EAAGC,GAAJ,OAAWD,IAAKC,EAAEW,YAAW,GACvDC,EAASwB,EAAOtC,QAAO,SAACC,EAAGC,GAAJ,OAAWD,IAAKC,EAAEY,SAAQ,GAIrD,MAFY,CAAC,UAAYH,EAAU,UAAYE,EAAU,OAASC,EAAO,OAD5DH,EAAUE,EAAUC,G,ICpHhB4B,E,uKAIb,IAAMjB,EAAU,CACd,CACEC,MAAO,YACPC,UAAW,WACXjB,IAAK,WACLiC,OAAQ,SAAAC,GAAI,OAAI,2BAAIA,KAEtB,CACElB,MAAO,SACPC,UAAW,SACXjB,IAAK,UAEP,CACEgB,MAAO,YACPC,UAAW,YACXjB,IAAK,aAEL,CACAgB,MAAO,SACPC,UAAW,SACXjB,IAAK,WASLjB,EAAOoD,KAAKC,MAAMD,KAAKE,UAAUrD,KAAKJ,MAAMG,OA/B3C,EAgC2BC,KAAKJ,MAA9B6C,EAhCF,EAgCEA,gBAAgBa,EAhClB,EAgCkBA,MAGvB,GAAS,MAANvD,EAEC,IAAI6C,EAASJ,EAAczC,EAAK0C,GAC5Bc,EAAUR,EAAiBhD,EAAK0C,GAGxC,OACI,yBAAKZ,GAAG,QAAQC,UAAU,QACtB,yBAAKA,UAAU,gBAAgB9B,KAAKJ,MAAM6C,gBAA1C,YACA,6BAAK,0BAAMX,UAAU,SAASyB,EAAQtC,WAAtC,UAA8D,0BAAMa,UAAU,QAAQwB,IACtF,kBAAC,IAAD,CAAOvB,QAASA,EAASG,WAAYU,S,GA/ClBN,a,eC4SpBkB,E,kLApSRd,QAAQC,IAAI,kCACZ3C,KAAKyD,Y,2CAMJf,QAAQC,IAAI,mCACZe,IAAU1D,KAAK2D,KAAKC,YAAYC,UAAU,KAAKC,SAC/C9D,KAAKyD,Y,gCAILf,QAAQC,IAAI,wBADP,MAEwB3C,KAAKJ,MAA5BmE,EAFD,EAECA,MAAOC,EAFR,EAEQA,OAAOjE,EAFf,EAEeA,KAChBkE,EAAMP,IAAU1D,KAAK2D,KAAKC,YACjBM,KAAK,YAAa,qBAG/BH,EAAQA,EAD4C,IAAtB,GAE9BC,EAASA,EAFU,GAAuB,GAG1C,IAAMG,EAAYC,YAAU,YACxBC,EAAIX,MAAeY,MAAM,CAAC,EAAGP,IAC7BQ,EAAKb,MAAiBY,MAAM,CAACN,EAAQ,IACnCQ,EAAM,CAAC,UAAU,UAAU,WAG3BC,EAAO,CAAC,UAAU,QAClB1C,EAAQ,CAAC,YAAY,YAAY,UACnC2C,EAAU,GACVC,EAAa,GACbC,EAAWzB,KAAKC,MAAMD,KAAKE,UAAUtD,IAEzC6E,EAASC,SAAQ,SAAUtE,GACvBkE,EAAOnE,QAAO,SAAUS,EAAG+D,EAAGC,GAE1B,OADAhE,EAAER,EAAEuE,IAAM/D,EAAER,EAAEuE,MAAQC,EAAI,IAAMN,EAAOO,OAAS,GAAK,IAC9CjE,EAAER,EAAEuE,MACZJ,GAASnD,KAAKhB,MAGrB,IAAI0E,EAAaP,EAAQ1E,KAAKJ,MAAM6C,iBAEpCpB,OAAO6D,KAAKD,GAAYJ,SAAQ,SAAS7D,EAAImE,GACzC,IAAIC,EAAM,GACVrD,EAAQ8C,SAAQ,SAACE,GACbK,EAAKL,GAAGE,EAAWjE,GAAKV,QAAO,SAAS+E,EAAIC,GAAK,OAAOD,EAAInE,SAASoE,EAAIP,MAAK,MAElFJ,EAAW3D,GAAMoE,KAIrB,IAAIG,EAAQ7B,IAAcW,GAAGmB,WAAW9B,IAAc,aAClD+B,EAAQ/B,IAAYa,GAEpBmB,EAAOhC,MACNW,GAAE,SAAS5C,GAAK,OAAO4C,EAAE5C,EAAExB,SAC3BsE,GAAE,SAAS9C,GAAK,OAAO8C,EAAE9C,EAAEkE,UAC3BC,MAAMlC,KAETkB,EAASC,SAAQ,SAASpD,GACxBA,EAAExB,KAAOkE,EAAU1C,EAAExB,SAGvB,IAAI4F,EAAY,GACVC,EAAM,CAAC,SAAS,YAAY,UAClCA,EAAKjB,SAAQ,SAACkB,EAASZ,GACnB,IAAIG,EAAI,GACR,IAAK,IAAIrF,KAAQ0E,EACb,GAAgB,WAAboB,EAAsB,CACrB,IAGIjD,EAHM5B,SAASyD,EAAW1E,GAAX,WACTiB,SAASyD,EAAW1E,GAAX,WACTiB,SAASyD,EAAW1E,GAAX,QAGnBqF,EAAI/D,KAAK,CAAC,KAAO4C,EAAUlE,GAAM,MAAQ6C,SAE3CwC,EAAI/D,KAAK,CAAC,KAAO4C,EAAUlE,GAAM,MAAQiB,SAASyD,EAAW1E,GAAM8F,MAGzEF,EAAUtE,KAAK,CAAC,KAAOwE,EAAS,OAAST,OAI7CjB,EAAE2B,OAAOtC,IAAUkB,GAAU,SAASnD,GAAK,OAAOA,EAAExB,SACpDsE,EAAEyB,OAAO,CACPtC,IAAOmC,GAAW,SAASI,GAAK,OAAOvC,IAAOuC,EAAEC,QAAQ,SAASC,GAAK,OAAOA,EAAER,YAC/EjC,IAAOmC,GAAW,SAASI,GAAK,OAAOvC,IAAOuC,EAAEC,QAAQ,SAASC,GAAK,OAAOA,EAAER,cAGnF1B,EAAImC,OAAO,KACNlC,KAAK,QAAS,UACdA,KAAK,YAAa,eAAiBF,EAAS,KAC5CqC,KAAKd,GAGVtB,EAAImC,OAAO,KAAKA,OAAO,QAClBlC,KAAK,QAAQ,gBACbA,KAAK,IAAKH,EAAQ,GAClBG,KAAK,IAAK,IACVoC,MAAM,cAAe,UACrBpD,KAAKlD,KAAKJ,MAAM6C,iBAErBwB,EAAImC,OAAO,KACNlC,KAAK,QAAS,UACdA,KAAK,YAAa,gBAClBmC,KAAKZ,GAEVxB,EAAImC,OAAO,QACNlC,KACD,CACI,MAAQ,iBACR,GAAO,EACP,GAAOH,EACP,GAAOQ,EAAE,GACT,GAAOA,EAAE,GACT,kBAAoB,aACpB,OAAW,QACX,eAAiB,MACjB,mBAAqB,SAI7BN,EAAIJ,UAAU,aACT9D,KAAK8F,GACLU,QAAQH,OAAO,KACflC,KAAK,QAAS,YACdsC,GAAG,SAAQ,WAAK9D,QAAQC,IAAI,cAItBsB,EAAIJ,UAAU,aAAauC,OAAO,QACxClC,KAAK,QAAS,QACdA,KAAK,KAAK,SAASzC,EAAE0D,GACpB,OAAOO,EAAKjE,EAAEyE,WACfI,MAAM,UAAU,SAAS7E,EAAEsD,GAC1B,OAAOP,EAAMO,MAGd0B,MAAK,SAAShF,EAAEsD,GAAI,IAAD,OACpB,GAAGhD,EAAQ2E,SAASjF,EAAEkF,MAAM,CACxB,IAAIC,EAAc5G,KAAK6G,iBACvBnD,IAAU1D,MACTkE,KAAK,mBAAoB0C,EAAc,IAAMA,GAC7C1C,KAAK,YAAa,gBAClBsC,GAAG,SAAQ,WACR9C,IAAU,GAAMQ,KAAK,oBAAqB0C,GACvCE,aACAC,SAAS,KACTC,KAAKtD,KACLQ,KAAK,oBAAqB,UAMvC,IAAI+C,EAAShD,EAAIJ,UAAU,aACtB9D,KAAK+F,GACLS,QACFH,OAAO,KACLlC,KAAK,QAAS,UAEnB+C,EAAOb,OAAO,QACTlC,KAAK,IAAK,IACVA,KAAK,KAAK,SAASzC,EAAGsD,GAAI,OAAW,GAAJA,EAAQ,MACzCb,KAAK,QAAS,IACdA,KAAK,SAAU,IACfoC,MAAM,QAAQ,SAAS7E,EAAEsD,GACxB,OAAOP,EAAMO,MAGnBkC,EAAOb,OAAO,QACTlC,KAAK,IAAK,IACVA,KAAK,KAAK,SAASzC,EAAGsD,GAAI,OAAY,GAAJA,EAAU,MAC5C7B,MAAK,SAASzB,GAAI,OAAOA,KAIpC,IAAIyF,EAASjD,EAAImC,OAAO,KACrBlC,KAAK,QAAS,sBAGjBgD,EAAOd,OAAO,QACXlC,KAAK,QAAS,cACdoC,MAAM,SAAU,SAChBA,MAAM,eAAgB,OACtBA,MAAM,UAAW,KAGpB,IAAIa,EAAQC,SAASC,uBAAuB,QAGxCC,EAAeJ,EAAOrD,UAAU,mBACjC9D,KAAK2D,IAASyD,EAAMnC,SACpBuB,QACAH,OAAO,KACPlC,KAAK,QAAS,kBAGjBoD,EAAalB,OAAO,UACjBlC,KAAK,IAAK,GACVoC,MAAM,UAAU,SAAS7E,GACxB,MAAO,WAER6E,MAAM,OAAQ,QACdA,MAAM,eAAgB,OACtBA,MAAM,UAAW,KAGpBgB,EAAalB,OAAO,QACjBlC,KAAK,YAAa,mBAGrBgD,EAAOd,OAAO,YACXlC,KAAK,QAASH,GACdG,KAAK,SAAUF,GACfE,KAAK,OAAQ,QACbA,KAAK,iBAAkB,OACvBsC,GAAG,YAAY,WACd9C,IAAU,eACP4C,MAAM,UAAW,KACpB5C,IAAa,0BACV4C,MAAM,UAAW,KACpB5C,IAAa,wBACV4C,MAAM,UAAW,QAErBE,GAAG,aAAa,WACf9C,IAAU,eACP4C,MAAM,UAAW,KACpB5C,IAAa,0BACV4C,MAAM,UAAW,KACpB5C,IAAa,wBACV4C,MAAM,UAAW,QAErBE,GAAG,aAAa,WACf,IAAIe,EAAQ7D,IAAS1D,MAGrB0D,IAAU,eACPQ,KAAK,KAAK,WACT,IAAIzC,EAAI,IAAM8F,EAAM,GAAK,IAAMvD,EAE/B,OADAvC,GAAK,IAAM8F,EAAM,GAAK,QAK1B7D,IAAa,mBACVQ,KAAK,aAAa,SAASzC,EAAGsD,GAW7B,IAJA,IAAIyC,EAAY,EACZC,EAAMN,EAAMpC,GAAG8B,iBACfa,EAAS,OAED,CACVA,EAAShG,KAAKiG,OAAOH,EAAYC,GAAO,GACxC,IAAIG,EAAMT,EAAMpC,GAAG8C,iBAAiBH,GACpC,IAAKA,IAAWD,GAAOC,IAAWF,IAAcI,EAAIvD,IAAMkD,EAAM,GAC5D,MAEJ,GAAIK,EAAIvD,EAAIkD,EAAM,GAASE,EAAMC,MAC5B,MAAIE,EAAIvD,EAAIkD,EAAM,IAClB,MADsBC,EAAYE,GASzC,OAJAhE,IAAU1D,MAAM8H,OAAO,QACpB5E,KAAKqB,EAAEwD,OAAOH,EAAIrD,GAAGyD,QAAQ,IAGzB,aAAeT,EAAM,GAAK,IAAMK,EAAIrD,EAAG,Y,+BAYlD,OAJA7B,QAAQC,IAAI,uBAEG3C,KAAKJ,MAAbG,KAKA,uBAAGkI,IAAI,eAFH,S,GAhSM3F,aCRJ4F,G,8KACP,IAAD,EAC0BlI,KAAKJ,MAA7BG,EADF,EACEA,KAAK0C,EADP,EACOA,gBAEZ,OADAC,QAAQC,IAAI,QAAQ3C,KAAKJ,MAAM6C,iBAE3B,yBAAKZ,GAAG,QAAQC,UAAU,QACtB,yBAAKwE,MAAO,CAAE6B,UAAW,SAASC,UAAU,WACpC,yBAAKvG,GAAG,UAAUkC,MAAO,IAAKC,OAAQ,IAAKvB,gBAAiBA,GACxD,kBAAC,EAAD,CAAYsB,MAAO,IAAKC,OAAQ,IAAKjE,KAAMA,EAAM0C,gBAAiBA,W,GAR3DH,c,oCCyIpB+F,G,yDA/HX,WAAYzI,GAAQ,IAAD,sBAEjB,IAAI0D,EAAQf,GADZ,cAAM3C,IACsBA,MAAMG,MAFjB,OAGjB,EAAKuI,MAAQ,CAAErI,KAAMqD,EAAOiF,SAAS,UAHpB,E,sDAOlB,IAAD,OACI7F,QAAQC,IAAI,wBACN,IAAAsB,EAAMP,IAAU1D,KAAK2D,KAAK6E,QAASzI,EAASC,KAAKJ,MAAdG,KACnC0I,EAAa/E,MAAiBgF,OAAO,CAAC,GAAI,KAC3CC,MAAM,KACLC,EAAOlF,IAAW+E,GAClBhE,EAAS,CAAC,UAAW,QACvBC,EAAU,GAEVmE,EAAMC,cACP5E,KAAK,QAAS,UACd6E,UAAU,KACVC,MAAK,SAASvH,GACb,IAAI3B,EAAU2B,EAAEwH,WAAF,KAEV1F,EAAWR,EAAiBhD,EAAKD,GAIrC,MAFgB,WAAWA,EAAQ,mEAAwEyD,EAAQtC,UAAY,8DAAmEsC,EAAQnC,OAAS,8DAAmEmC,EAAQT,OAAS,iEAAsES,EAAQpC,UAAY,iBAKrYpB,EAAK8E,SAAQ,SAAUtE,GACnBkE,EAAOnE,QAAO,SAAUS,EAAG+D,EAAGC,GAE1B,OADAhE,EAAER,EAAEuE,IAAM/D,EAAER,EAAEuE,MAAQC,EAAI,IAAMN,EAAOO,OAAS,GAAK,IAC9CjE,EAAER,EAAEuE,MACZJ,GAASnD,KAAKhB,MAGrBmD,IAAa,6BAA6BI,SAC1C,IAAMgB,EAAIb,EAAImC,OAAQ,KAAMlC,KAAK,KAAK,cAGlCgF,EAAexF,MACdsC,OAAO,CAAC,IAAI,IAAK,IAAK,IAAK,IAAM,IAAM,IAAM,MAC7C1B,MAAMZ,IAAe,IAG1BoB,EAAEsB,OAAO,UACJlC,KAAK,KAAM,oBACXA,KAAK,IAAI,IACToC,MAAM,UAAW,GACjBpC,KAAK,OAAO,OACjBY,EAAEuB,KAAKwC,GACP/D,EAAEjB,UAAU,mBACT9D,KAAKoJ,IAAiBC,EAAOA,EAAMC,QAAQC,OAAOC,UAElDlD,KAAKwC,GACJW,KAAK,QACJtF,KAAK,QAAQ,SAACzC,GACP,IAAI3B,EAAS2B,EAAEwH,WAAF,KAETQ,EJ5DxB,SAAyB1J,EAAKD,EAAQG,GAElC,IAAMwE,EAAS,CAAC,UAAW,QACvBC,EAAU,GACVgF,EAAS,CAAC,UAAY,EAAE,UAAY,EAAE,OAAS,EAAE,OAAS,GAE9D3J,EAAK8E,SAAQ,SAAUtE,GACnBkE,EAAOnE,QAAO,SAAUS,EAAG+D,EAAGC,GAE1B,OADAhE,EAAER,EAAEuE,IAAM/D,EAAER,EAAEuE,MAAQC,EAAI,IAAMN,EAAOO,OAAS,GAAK,IAC9CjE,EAAER,EAAEuE,MACZJ,GAASnD,KAAKhB,MAIrB,IACI,IAAIoJ,EAAYjF,EAAQ5E,GAASG,GAC7BgB,EAAU,EAAEG,EAAO,EAAED,EAAU,EACnC,IAAIwI,GAAsC,IAAvBA,EAAY3E,OAAe,OAAO0E,EACrDC,EAAY9E,SAAQ,SAAAnF,GAChBuB,GAAsBC,SAASxB,EAAM,WACrC0B,GAAgBF,SAASxB,EAAM,QAC/ByB,GAAsBD,SAASxB,EAAM,cAG5C,MAAMkK,GAEH,OAAOF,EAuBX,OAFAA,EAAS,CAAC,UAAYzI,EAAU,UAAYE,EAAU,OAASC,EAAO,OAAUH,EAAUE,EAAUC,GIavEyI,CAAgB9J,EAAKD,EAAQ,EAAKwI,MAAMrI,MAAM,EAAKqI,MAAMC,UAEtE,OADYW,EAAaO,MAGhCvF,KAAK,QAAQ,aACbA,KAAK,MAAK,SAAAzC,GAAC,OAAIA,EAAEwH,WAAF,QAEf/E,KAAK,SAAU,SACfA,KAAK,kBAAmB,SACxBA,KAAK,IAAK0E,GACVpC,GAAG,SAAS,SAAA/E,GACTiB,QAAQC,IAAIlB,GACZ,EAAK7B,MAAMC,iBAAiB4B,EAAEwH,WAAF,MAE5BJ,EAAIiB,UAEPtD,GAAG,aAAa,SAAU/E,GACvB,IAAIiG,EAAShE,IAAU,qBAClBQ,KAAK,KAAMR,IAASqG,SACpB7F,KAAK,KAAMR,IAASsG,QAAU,GAC9BC,OACLpB,EAAIqB,KAAKzI,EAAGiG,MAEflB,GAAG,WAAYqC,EAAIiB,MAExBhF,EAAEsB,OAAO,KACNlC,KAAK,QAAS,gBACdA,KAAK,YAAa,qBAErB,IAAIiG,EAAeC,cAChBC,WAAW,IACXC,YAAY5G,IAAU,QACtB6G,OAAO,YACPC,OAAOC,IAAcC,iBACrB/B,MAAMO,GAETpE,EAAEgD,OAAO,iBACNzB,KAAK8D,K,0CAORzH,QAAQC,IAAI,kCACZ3C,KAAK2K,Y,2CAMLjI,QAAQC,IAAI,mCAEZ3C,KAAK2K,Y,+BAWL,OANAjI,QAAQC,IAAI,uBAML,uBAAGsF,IAAI,e,GA7HK3F,cCPNsI,G,8KAEP,IAAD,EAC2C5K,KAAKJ,MAA9CG,EADF,EACEA,KAAK0C,EADP,EACOA,gBAAgB5C,EADvB,EACuBA,iBAE5B,OACI,yBAAKgC,GAAG,QAAQC,UAAU,QACtB,yBAAKwE,MAAO,CAAE6B,UAAW,SAASC,UAAU,WACpC,yBAAKrE,MAAM,MAAMC,OAAO,OACpB,kBAAC,EAAD,CAAejE,KAAMA,EAAM0C,gBAAiBA,EAAiB5C,iBAAkBA,W,GATxEyC,c,2BCS3BuI,EAAkBC,IAAlBD,MAAOE,EAAWD,IAAXC,QAGMC,E,4MAEjB1C,MAAQ,CACJ2C,WAAW,KACXxI,gBAAgB,iB,EAiBpByI,qBAAqB,SAACpL,GAElB,EAAKqL,SAAS,CAAC1I,gBAAiB3C,K,kEAhBhB,IAAD,OAGfsL,QAAQC,IAAI,CACR3H,IAAO4H,OACRC,MAAM,YAAmB,IAAjBN,EAAgB,oBACpBA,EACC,EAAKE,SAAS,CAACF,eAEfO,MAAM,YAEXC,OAAM,SAAAC,GAAG,OAAIF,MAAME,Q,+BAQhB,IACCT,EAAcjL,KAAKsI,MAAnB2C,WACP,IAAIA,EAAY,OAAO,KACvB,IAAI3H,EAAQf,EAAW0I,GACnBxI,EAAkBzC,KAAKsI,MAAM7F,gBAEjC,OACI,6BACI,kBAAC,IAAD,CAAQ6D,MAAO,CAAEtC,OAAQ,MACrB,kBAAC,IAAD,KACI,kBAAC6G,EAAD,CAAO9G,MAAO,IAAKuC,MAAO,CAACqF,gBAAgB,SACvC,kBAACZ,EAAD,CAASzE,MAAO,CAAEtC,OAAQ,MACtB,kBAAC,EAAD,CAAOjE,KAAMkL,EAAYpL,iBAAkBG,KAAKkL,yBAGxD,kBAAC,IAAD,CAAQ5E,MAAO,CAAEtC,OAAQ,MACrB,kBAAC+G,EAAD,CAASzE,MAAO,CAAEtC,OAAQ,MACtB,kBAAC,EAAD,CAAOjE,KAAMkL,EAAYxI,gBAAiBzC,KAAKsI,MAAM7F,gBACjD5C,iBAAkBG,KAAKkL,wBAE/B,kBAACH,EAAD,CAASzE,MAAO,CAAEtC,OAAQ,MACtB,kBAAC,EAAD,CAAOjE,KAAMkL,EAAYxI,gBAAiBzC,KAAKsI,MAAM7F,oBAI7D,kBAACoI,EAAD,CAAO9G,MAAO,IAAKuC,MAAO,CAACqF,gBAAgB,SACvC,kBAAC,EAAD,CAAO5L,KAAMkL,EAAYxI,gBAAiBA,EAAiBa,MAAOA,Y,GApDvDhB,aCdvCsJ,IAAS3I,OAAO,kBAAC,EAAD,MAAemE,SAASyE,eAAe,W","file":"static/js/main.da82928d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/covid_19_data.425ae4fc.csv\";","import React, { Component } from 'react';\r\n//import { Avatar } from 'antd';\r\nimport './view1.css';\r\nimport { Table } from 'antd';\r\n//import * as d3 from 'd3';\r\n\r\n\r\nexport default class View1 extends Component {\r\n    handleDoubleClick=(record, rowIndex)=>{\n        this.props.onCountryChanged(record.country);\r\n    }\r\n    render() {\r\n        const columns = [\r\n          {\r\n            title: 'Country',\r\n            dataIndex: 'country',\r\n            key: 'country',\n          },\r\n          {\r\n            title: 'Deaths',\r\n            dataIndex: 'deaths',\r\n            key: 'deaths',\r\n          }\n        ];\r\n\r\n\r\n        const {data} = this.props;\r\n        let date = null,total = 0;\r\n\r\n\r\n        if(data!=null)\r\n        {\r\n            const today = new Date();\r\n            const closest = data.reduce((a, b) => a.Date - today < b.Date - today ? a : b);\r\n            date= closest.date;\r\n            const latest_data = data.filter((row)=>{return(row.date===date);});\r\n\r\n            var  helper = {};\r\n            var sum_by_country = latest_data.reduce(function(r, o) {\r\n              var key = o.country;\r\n\r\n              if(!helper[key]) {\r\n                helper[key] = Object.assign({}, o); // create a copy of o\r\n                r.push(helper[key]);\r\n              } else {\r\n                helper[key].confirmed = parseInt(helper[key].confirmed) + parseInt(o.confirmed);\r\n                helper[key].recovered = parseInt(helper[key].recovered) + parseInt(o.recovered);\r\n                helper[key].deaths = (parseInt(helper[key].deaths) + parseInt(o.deaths));\n              }\r\n\r\n              return r;\r\n            }, []);\r\n\n\r\n            var sums = sum_by_country.map(function(d) {\r\n              return {\r\n                country: d.country,\r\n                deaths:Math.round(d.deaths),\n                confirmed: Math.round(d.confirmed),\n                recovered: Math.round(d.recovered),\n              }\r\n            });\r\n\n            sums.sort(function(a,b) {\r\n                return b.confirmed-a.confirmed;\r\n            });\r\n            total= sums.reduce((a, b) => +a + +b.confirmed, 0);;\n\r\n        }//if(data!=null)\n\r\n        return (\r\n            <div id='view1' className='pane'>\r\n                <div className='confirmed'>Confirmed:</div>\r\n                <div><span className='total'>{total}</span> until <span className='date'>{date}</span></div>\r\n                <Table columns={columns} dataSource={sums}\r\n                      onRow={(record, rowIndex) => {\r\n                      return {\r\n                          onClick: event => {this.handleDoubleClick(record, rowIndex)} // double click row\n                        };\r\n                      }}\r\n                />\r\n            </div>\r\n        )\r\n    }//render\r\n}\r\n\r\n\r\n","function groupBy(list, keyGetter) {\n    const map = new Map();\n    list.forEach((item) => {\n         const key = keyGetter(item);\n         const collection = map.get(key);\n         if (!collection) {\n             map.set(key, [item]);\n         } else {\n             collection.push(item);\n         }\n    });\n    return map;\n}\n\n\nfunction findCountryData(data,country,date){\n//    country = countryname(country);\n    const groups = ['country', 'date'];\n    var grouped = {};\n    var result = {\"confirmed\":0,\"recovered\":0,\"deaths\":0,\"active\":0}\n\n    data.forEach(function (a) {\n        groups.reduce(function (o, g, i) {  // take existing object,\n            o[a[g]] = o[a[g]] || (i + 1 === groups.length ? [] : {}); // or generate new obj, or\n            return o[a[g]];                                           // at last, then an array\n        }, grouped).push(a);\n    });\n\n\n    try{\n        var countrydata=grouped[country][date];\n        var confirmed=0,deaths=0,recovered=0;\n        if(!countrydata || countrydata.length === 0) {return result;}\n        countrydata.forEach(record=>{\n            confirmed = confirmed+parseInt(record['confirmed']);\n            deaths = deaths+parseInt(record['deaths']);\n            recovered = recovered+parseInt(record['recovered']);\n        });\n//        console.log(confirmed,deaths,recovered);\n    }catch(error){\n//        console.log(\"error \", country, date,error);\n        return result;\n    };\n\n//    if(datatype==='deaths'){\n////        if(country==='China'){\n////            console.log('deaths ', country, date,datatype,data)\n////\n////        }\n//        return deaths;\n//    }else if(datatype==='recovered'){\n////        console.log('recovered ', recovered)\n//        return recovered;\n//    }else if(datatype==='hospitalized'){\n//        var hospitalized =confirmed-deaths-recovered;\n////        console.log('hospitalized ', hospitalized)\n//        return hospitalized;\n//    }else{\n////        console.error(\"no matched datadype\");\n//        return 0;\n//    }\n\n    result = {\"confirmed\":confirmed,\"recovered\":recovered,\"deaths\":deaths,\"active\":(confirmed-recovered-deaths)};\n\n    return result;\n\n\n}\n\nfunction latestDate(data){\n    const today = new Date();\n    const closest = data.reduce((a, b) => a.Date - today < b.Date - today ? a : b);\n\n    return closest.date;\n}\n\nfunction countryname(name){\n    if(name==='Mainland China')\n    {\n        return \"China\";\n    }\n    else if(name==='US')\n    {\n        return \"United States\";\n    }\n    else{\n        return name;\n    }\n\n}\n\n\nfunction latestCountry(data,selectedCountry){\n//    selectedCountry = countryname(selectedCountry);\n    const today = new Date();\n    const closest = data.reduce((a, b) => a.Date - today < b.Date - today ? a : b);\n    const date= closest.date;\n    const latest_data = data.filter((row)=>{return(row.date===date && row.country=== selectedCountry);});\n    console.log(date,selectedCountry,latest_data);\n\n    var latest = latest_data.map(function(d) {\n      return {\n        province: d.province,\n        deaths: d.deaths,\n        confirmed: d.confirmed,\n        recovered: d.recovered,\n        active:parseInt(d.confirmed) - parseInt(d.deaths) - parseInt(d.recovered),\n      }\n    });\n\n    latest.sort(function(a,b) {\n        return b.confirmed-a.confirmed;\n    });\n    console.log(\"latest\",latest);\n    return latest;\n\n}\n\nfunction summarizeCountry(data,selectedCountry){\n//    selectedCountry = countryname(selectedCountry);\n    var latest = latestCountry(data,selectedCountry);\n    var confirmed = latest.reduce((a, b) => +a + +b.confirmed, 0);\n    var recovered = latest.reduce((a, b) => +a + +b.recovered, 0);\n    var deaths = latest.reduce((a, b) => +a + +b.deaths, 0);\n    var active = confirmed-recovered-deaths;\n    var summary={\"confirmed\":confirmed,\"recovered\":recovered,\"deaths\":deaths,\"active\":active};\n//    console.log(\"summary\",selectedCountry,summary);\n    return summary;\n}\n\n\n\nfunction findMax(data, datatype){\n    var grouped = {};\n    const groups = ['country', 'date'];\n\n\n    data.forEach(function (a) {\n        groups.reduce(function (o, g, i) {  // take existing object,\n            o[a[g]] = o[a[g]] || (i + 1 === groups.length ? [] : {}); // or generate new obj, or\n            return o[a[g]];                                           // at last, then an array\n        }, grouped).push(a);\n    });\n\n//    console.log(\"findMax\",grouped);\n}\n\n\nexport {groupBy,findCountryData,findMax,summarizeCountry,latestCountry,latestDate};\n","import React, { Component } from 'react';\r\n//import { Avatar } from 'antd';\r\nimport './view2.css';\r\nimport { Table } from 'antd';\r\n//import * as d3 from 'd3';\r\nimport {summarizeCountry,latestCountry} from \"../../charts/util.js\"\r\n\r\n\r\nexport default class View2 extends Component {\r\n\r\n    render() {\r\n\r\n        const columns = [\r\n          {\r\n            title: 'State/Pro',\r\n            dataIndex: 'province',\r\n            key: 'province',\r\n            render: text => <a>{text}</a>,\r\n          },\r\n          {\r\n            title: 'Deaths',\r\n            dataIndex: 'deaths',\r\n            key: 'deaths',\r\n          },\r\n          {\r\n            title: 'Confirmed',\r\n            dataIndex: 'confirmed',\r\n            key: 'confirmed',\r\n          },\r\n            {\r\n            title: 'Active',\r\n            dataIndex: 'active',\r\n            key: 'active',\r\n          },\r\n//         {\r\n//            title: 'Recovered',\r\n//            dataIndex: 'recovered',\r\n//            key: 'recovered',\r\n//          },\r\n        ];\r\n\r\n        var data = JSON.parse(JSON.stringify(this.props.data));\r\n        const {selectedCountry,lDate} = this.props;\r\n\r\n\r\n        if(data!=null)\r\n        {\r\n            var latest = latestCountry(data,selectedCountry);\r\n            var summary = summarizeCountry(data,selectedCountry);\r\n        }\n\r\n        return (\r\n            <div id='view2' className='pane'>\r\n                <div className='countrytitle'>{this.props.selectedCountry} Detail:</div>\r\n                <div><span className='total'>{summary.confirmed}</span> until <span className='date'>{lDate}</span></div>\r\n                <Table columns={columns} dataSource={latest} />\r\n            </div>\r\n        )\r\n    }//render\r\n}\r\n\r\n\r\n","import React , { Component }from 'react';\n//import { BarStack } from '@vx/shape';\n//import { Group } from '@vx/group';\n//import { Grid } from '@vx/grid';\n//import { AxisBottom } from '@vx/axis';\n//import { cityTemperature } from '@vx/mock-data';\n//import { scaleBand, scaleLinear, scaleOrdinal } from '@vx/scale';\nimport { timeParse } from 'd3-time-format';\n//import { withTooltip, Tooltip } from '@vx/tooltip';\n//import { LegendOrdinal } from '@vx/legend';\n//import {groupBy} from '../util.js'\nimport * as d3 from 'd3';\n\n\nclass CoronaLine extends Component{\n   componentDidMount() {\n       console.log(\"CoronaLine:componentDidMount()\")\n       this.drawsvg();\n\n\n    }\n\n    componentDidUpdate() {\n        console.log(\"CoronaLine:componentDidUpdate()\");\n        d3.select(this.refs.anchorLine).selectAll('g').remove();\n        this.drawsvg();\n    }\n\n    drawsvg(){\n        console.log(\"CoronaLine:drawsvg()\")\n        var { width, height,data } = this.props;\n        var svg = d3.select(this.refs.anchorLine)\n                    .attr(\"transform\", \"translate(100,15)\");\n\n        var margin = {top: 20, right: 50, bottom: 30, left: 100};\n        width = width - margin.left - margin.right;\n        height = height - margin.top - margin.bottom;\n        const parseDate = timeParse('%m/%d/%Y');//01/22/2020\n        var x = d3.scaleTime().range([0, width]);\n        var y =  d3.scaleLinear().range([height, 0]);\n        const color=['#ff8424','#efb01d','#a44afe'];\n\n        // sum the data for each country and date\n        const groups=[\"country\",\"date\"];\n        const columns=['confirmed','recovered','deaths'];\n        var grouped = {};\n        var sumcountry = {};\n        var linedata = JSON.parse(JSON.stringify(data));\n\n        linedata.forEach(function (a) {\n            groups.reduce(function (o, g, i) {  // take existing object,\n                o[a[g]] = o[a[g]] || (i + 1 === groups.length ? [] : {}); // or generate new obj, or\n                return o[a[g]];                                           // at last, then an array\n            }, grouped).push(a);\n        });\n\n        var rawcountry = grouped[this.props.selectedCountry];\n\n        Object.keys(rawcountry).forEach(function(key,index) {\n            var item ={};\n            columns.forEach((i)=>{\n                item[i]=rawcountry[key].reduce(function(acc,obj){return acc+parseInt(obj[i])},0);\n            });\n            sumcountry[key]= item;\n        });\n        // sum the data for each country and date\n\n        var xAxis = d3.axisBottom(x).tickFormat(d3.timeFormat(\"%Y-%m-%d\"));\n        var yAxis = d3.axisLeft(y);\n\n        var line = d3.line()\n            .x(function(d) { return x(d.date); })\n            .y(function(d) { return y(d.price); })\n            .curve(d3.curveCardinal);\n\n          linedata.forEach(function(d) {\n            d.date = parseDate(d.date);\n          });\n\n          var companies = [];\n          const cols= ['active','recovered','deaths'];\n          cols.forEach((category,index)=>{\n              let obj=[];\n              for (var date in sumcountry){\n                  if(category === 'active'){\n                      var con = parseInt(sumcountry[date][\"confirmed\"]);\n                      var rec = parseInt(sumcountry[date][\"recovered\"]);\n                      var det = parseInt(sumcountry[date][\"deaths\"]);\n                      var active = (con-rec-det);\n//                      console.log(sumcountry[date]);\n                      obj.push({\"date\":parseDate(date),\"price\":active});\n                  }else{\n                    obj.push({\"date\":parseDate(date),\"price\":parseInt(sumcountry[date][category])});\n                  }\n              }\n              companies.push({\"name\":category,\"values\":obj});\n          });\n//          console.log(companies);\n\n          x.domain(d3.extent(linedata, function(d) { return d.date; }));\n          y.domain([\n            d3.min(companies, function(c) { return d3.min(c.values, function(v) { return v.price; }); }),\n            d3.max(companies, function(c) { return d3.max(c.values, function(v) { return v.price; }); })\n          ]);\n\n        svg.append(\"g\")\n            .attr(\"class\", \"x axis\")\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\n            .call(xAxis);\n\n            //Create Title\n        svg.append(\"g\").append(\"text\")\n            .attr(\"class\",\"countrytitle\")\n            .attr(\"x\", width / 2 )\n            .attr(\"y\", 20)\n            .style(\"text-anchor\", \"middle\")\n            .text(this.props.selectedCountry);\n\n        svg.append(\"g\")\n            .attr(\"class\", \"y axis\")\n            .attr(\"transform\", \"translate(0)\")\n            .call(yAxis);\n\n        svg.append(\"line\")\n            .attr(\n            {\n                \"class\":\"horizontalGrid\",\n                \"x1\" : 0,\n                \"x2\" : width,\n                \"y1\" : y(0),\n                \"y2\" : y(0),\n                \"shape-rendering\" : \"crispEdges\",\n                \"stroke\" : \"black\",\n                \"stroke-width\" : \"1px\",\n                \"stroke-dasharray\": (\"3, 3\")\n            });\n\n\n        svg.selectAll(\".raceline\")\n            .data(companies)\n            .enter().append(\"g\")\n            .attr(\"class\", \"raceline\")\n            .on(\"click\",()=>{console.log(\"clicked\");});\n\n\n\n        var path = svg.selectAll(\".raceline\").append(\"path\")\n            .attr(\"class\", \"line\")\n            .attr(\"d\", function(d,index) {\n              return line(d.values); })\n            .style(\"stroke\", function(d,i) {\n              return color[i];\n            });\n\n        path.each(function(d,i) {\n            if(columns.includes(d.name)){\n                var totalLength = this.getTotalLength();\n                d3.select(this)\n                .attr(\"stroke-dasharray\", totalLength + \" \" + totalLength )\n                .attr(\"transform\", \"translate(0)\")\n                .on('click',()=>{\n                    d3.select(this).attr(\"stroke-dashoffset\", totalLength)\n                      .transition()\n                      .duration(2000)\n                      .ease(d3.easeLinear)\n                      .attr(\"stroke-dashoffset\", 0);\n                });\n\n            }\n        });\n\n          var legend = svg.selectAll('g .legend')\n              .data(cols)\n              .enter()\n            .append('g')\n              .attr('class', 'legend');\n\n          legend.append('rect')\n              .attr('x', 60)\n              .attr('y', function(d, i){ return i * 30 +30 ;})\n              .attr('width', 20)\n              .attr('height', 20)\n              .style('fill', function(d,i) {\n                return color[i];\n              });\n\n          legend.append('text')\n              .attr('x', 90)\n              .attr('y', function(d, i){ return (i * 30) + 45;})\n              .text(function(d){ return d; });\n\n\n    // append a g for all the mouse over nonsense\n    var mouseG = svg.append(\"g\")\n      .attr(\"class\", \"mouse-over-effects\");\n\n    // this is the vertical line\n    mouseG.append(\"path\")\n      .attr(\"class\", \"mouse-line\")\n      .style(\"stroke\", \"black\")\n      .style(\"stroke-width\", \"1px\")\n      .style(\"opacity\", \"0\");\n\n    // keep a reference to all our lines\n    var lines = document.getElementsByClassName('line');\n\n    // here's a g for each circle and text on the line\n    var mousePerLine = mouseG.selectAll('.mouse-per-line')\n      .data(d3.range(lines.length))\n      .enter()\n      .append(\"g\")\n      .attr(\"class\", \"mouse-per-line\");\n\n    // the circle\n    mousePerLine.append(\"circle\")\n      .attr(\"r\", 7)\n      .style(\"stroke\", function(d) {\n        return 'black';\n      })\n      .style(\"fill\", \"none\")\n      .style(\"stroke-width\", \"1px\")\n      .style(\"opacity\", \"0\");\n\n    // the text\n    mousePerLine.append(\"text\")\n      .attr(\"transform\", \"translate(10,3)\");\n\n    // rect to capture mouse movements\n    mouseG.append('svg:rect')\n      .attr('width', width)\n      .attr('height', height)\n      .attr('fill', 'none')\n      .attr('pointer-events', 'all')\n      .on('mouseout', function() { // on mouse out hide line, circles and text\n        d3.select(\".mouse-line\")\n          .style(\"opacity\", \"0\");\n        d3.selectAll(\".mouse-per-line circle\")\n          .style(\"opacity\", \"0\");\n        d3.selectAll(\".mouse-per-line text\")\n          .style(\"opacity\", \"0\");\n      })\n      .on('mouseover', function() { // on mouse in show line, circles and text\n        d3.select(\".mouse-line\")\n          .style(\"opacity\", \"1\");\n        d3.selectAll(\".mouse-per-line circle\")\n          .style(\"opacity\", \"1\");\n        d3.selectAll(\".mouse-per-line text\")\n          .style(\"opacity\", \"1\");\n      })\n      .on('mousemove', function() { // mouse moving over canvas\n        var mouse = d3.mouse(this);\n\n        // move the vertical line\n        d3.select(\".mouse-line\")\n          .attr(\"d\", function() {\n            var d = \"M\" + mouse[0] + \",\" + height;\n            d += \" \" + mouse[0] + \",\" + 0;\n            return d;\n          });\n\n        // position the circle and text\n        d3.selectAll(\".mouse-per-line\")\n          .attr(\"transform\", function(d, i) {\n//            var xDate = x.invert(mouse[0]);\n\n            // since we are use curve fitting we can't relay on finding the points like I had done in my last answer\n            // this conducts a search using some SVG path functions\n            // to find the correct position on the line\n            // from http://bl.ocks.org/duopixel/3824661\n            var beginning = 0,\n                end = lines[i].getTotalLength(),\n                target = null;\n\n            while (true){\n              target = Math.floor((beginning + end) / 2);\n              var pos = lines[i].getPointAtLength(target);\n              if ((target === end || target === beginning) && pos.x !== mouse[0]) {\n                  break;\n              }\n              if (pos.x > mouse[0])      end = target;\n              else if (pos.x < mouse[0]) beginning = target;\n              else break; //position found\n            }\n\n            // update the text with y value\n            d3.select(this).select('text')\n              .text(y.invert(pos.y).toFixed(0));\n\n            // return position\n            return \"translate(\" + mouse[0] + \",\" + pos.y +\")\";\n          });\n      });\n\n\n    }\n\n    render(){\n        console.log(\"CoronaLine:render()\");\n\n        const {data} = this.props;\n\n        if(!data){\n            return null;\n        }\n        return <g ref=\"anchorLine\" />;\n    }\n}\n\nexport default CoronaLine;\n\n\n","import React, { Component } from 'react';\r\n//import MapChart from '../../charts/MapChart';\nimport CoronaLine from '../../charts/RaceLine';\n\r\nimport './view3.css';\n\r\nexport default class View3 extends Component {\n    render() {\r\n        const {data,selectedCountry} = this.props;\n        console.log(\"view3\",this.props.selectedCountry);\n        return (\r\n            <div id='view3' className='pane'>\r\n                <div style={{ overflowX: 'scroll',overflowY:'hidden' }}>\n                        <svg id=\"linesvg\" width={900} height={300} selectedCountry={selectedCountry}>\n                            <CoronaLine width={900} height={300} data={data} selectedCountry={selectedCountry}/>\n                        </svg>\n                </div>\n            </div>\r\n        )\r\n    }\r\n}\n","import React, {Component} from 'react';\n// import queue from 'queue';\n// import topojson from 'topojson';\nimport * as topojson from 'topojson';\nimport * as d3 from 'd3';\nimport {findCountryData,summarizeCountry,latestDate} from '../util.js';\nimport world from '../../data/world-topo.json';\n//import world from '../../data/countries_geo.json';\n//import { timeParse, timeFormat } from 'd3-time-format';\nimport { legendColor,legendHelpers } from 'd3-svg-legend';\nimport d3Tip from \"d3-tip\";\nimport './style.css';\n\n\nclass CoronaBubble extends Component {\n\n    constructor(props) {\n      super(props);\n      var lDate = latestDate(this.props.data);\n      this.state = { date: lDate, datatype:'deaths' };\n    }\n\n    drawmap()\n    {\n        console.log(\"CoronaBubble:drawmap\");\n        const svg = d3.select(this.refs.anchor),{data } = this.props;\n        const projection = d3.geoMercator().center([30, 40 ])\n            .scale(120);\n        const path = d3.geoPath(projection);\n        const groups = ['country', 'date'];\n        var grouped = {};\n\n        var tip = d3Tip()\n          .attr('class', 'd3-tip')\n          .direction('s')\n          .html(function(d) {\n            var country = d.properties['name'];\n//            var country = d.properties['ADMIN'];\n            var summary =  summarizeCountry(data,country);\n\n            var tipstring = \"<strong>\"+country+\"</strong><br>\"+\"<strong>Confirmed:</strong><span style='color:red'>\" + summary.confirmed + \"</span><br>\"+\"<strong>deaths:</strong><span style='color:red'>\" + summary.deaths + \"</span><br>\"+\"<strong>active:</strong><span style='color:red'>\" + summary.active + \"</span><br>\"+\"<strong>recovered:</strong><span style='color:red'>\" + summary.recovered + \"</span><br>\";\n\n            return tipstring;\n          })\n\n        data.forEach(function (a) {\n            groups.reduce(function (o, g, i) {  // take existing object,\n                o[a[g]] = o[a[g]] || (i + 1 === groups.length ? [] : {}); // or generate new obj, or\n                return o[a[g]];                                           // at last, then an array\n            }, grouped).push(a);\n        });\n\n        d3.selectAll(\"#worldgroup,.legendLinear\").remove();\n        const g = svg.append( \"g\" ).attr(\"id\",\"worldgroup\");\n\n\n        var linear_color = d3.scaleThreshold()\n            .domain([500,1000,2000,5000,10000,20000,50000,100000])\n            .range(d3.schemeBlues[9]);\n\n\n        g.append('circle')\n            .attr('id', 'tipfollowscursor')\n            .attr('r',15)\n            .style(\"opacity\", 0.0)\n            .attr('fill','red');\n        g.call(tip);\n        g.selectAll(\"path .worldpath\")\n          .data(topojson.feature(world, world.objects.units).features)\n//          .data(world.features)\n          .call(tip)\n           .join(\"path\")\n            .attr(\"fill\", (d)=>{\n                    var country =d.properties['name'];\n//                    var country =d.properties['ADMIN'];\n                    var number = findCountryData(data,country,this.state.date)[this.state.datatype];\n                    var color = linear_color(number);\n                    return color;\n                })\n            .attr(\"class\",\"worldpath\")\n            .attr(\"id\",d => d.properties['name'])\n//            .attr(\"id\",d => d.properties['ADMIN'])\n            .attr(\"stroke\", \"black\")\n            .attr(\"stroke-linejoin\", \"round\")\n            .attr(\"d\", path)\n            .on('click', d=>{\n                console.log(d);\n                this.props.onCountryChanged(d.properties['name']);\n//                this.props.onCountryChanged(d.properties['ADMIN']);\n                tip.hide();\n            })\n            .on('mouseover', function (d) {\n                var target = d3.select('#tipfollowscursor')\n                    .attr('cx', d3.event.offsetX)\n                    .attr('cy', d3.event.offsetY - 5) // 5 pixels above the cursor\n                    .node();\n                tip.show(d, target);\n            })\n            .on('mouseout', tip.hide);\n\n        g.append(\"g\")\n          .attr(\"class\", \"legendLinear\")\n          .attr(\"transform\", \"translate(30,270)\");\n\n        var legendLinear = legendColor()\n          .shapeWidth(30)\n          .labelFormat(d3.format(\".0f\"))\n          .orient('vertical')\n          .labels(legendHelpers.thresholdLabels)\n          .scale(linear_color);\n\n        g.select(\".legendLinear\")\n          .call(legendLinear);\n\n\n    }//drawmap\n\n\n    componentDidMount() {\n        console.log(\"CoronaBubble:componentDidMount\")\n        this.drawmap();\n//        this.drawbubble();\n\n    }\n\n    componentDidUpdate() {\n        console.log(\"CoronaBubble:componentDidUpdate\");\n//        this.drawbubble();\n        this.drawmap();\n\n    }\n\n    render() {\n        console.log(\"CoronaBubble:render\");\n//        const { worldData }  = this.state;\n\n//        if(!world) {return null}\n\n\n        return <g ref=\"anchor\" />;\n    }\n}\n\nexport default CoronaBubble;\n","import React, { Component } from 'react';\n//import MapChart from '../../charts/MapChart';\nimport CoronaBubble from '../../charts/WorldBubbleChart';\n//import RaceBubble from '../../charts/RaceBubble';\n//import * as d3 from 'd3';\nimport './view7.css';\n\nexport default class View7 extends Component {\n\n    render() {\n        const {data,selectedCountry,onCountryChanged} = this.props;\n\n        return (\n            <div id='view7' className='pane'>\n                <div style={{ overflowX: 'scroll',overflowY:'hidden' }}>\n                        <svg width=\"900\" height=\"500\">\n                            <CoronaBubble  data={data} selectedCountry={selectedCountry} onCountryChanged={onCountryChanged}/>\n                        </svg>\n                </div>\n            </div>\n        )\n    }\n}\n\n","import React, { Component } from 'react';\r\n//import { Layout,Row,Col,Tabs } from 'antd';\r\nimport { Layout} from 'antd';\r\nimport View1 from './views/View1';\r\nimport View2 from './views/View2';\r\nimport View3 from './views/View3';\r\n//import View4 from './views/View4';\r\n//import View5 from './views/View5';\r\nimport {latestDate} from './charts/util.js';\r\nimport View7 from './views/View7';\r\n//import View8 from './views/View8';\r\nimport './dashboard.css';\r\nimport rawdata from './data/covid_19_data.csv';\r\n//import rawdata from 'covid.csv';\r\nimport * as d3 from 'd3';\r\n\r\nconst { Sider, Content} = Layout;\r\n//const {TabPane} = Tabs;\r\n\r\nexport default class Dashboard extends Component {\r\n\r\n    state = {\r\n        coronadata:null,\r\n        selectedCountry:'United States',\r\n    }\r\n\r\n    componentDidMount(){\r\n\r\n//        //todo update domain based on the max deaths number\r\n        Promise.all([\r\n            d3.csv(rawdata)\r\n        ]).then( ([coronadata]) => {\r\n            if(coronadata){\r\n                this.setState({coronadata});\r\n            }else{\r\n                alert(\"wrong\")\r\n            }\r\n        }).catch(err => alert(err))\r\n    }\r\n\r\n    handleCountryChanged=(country)=>{\r\n//        console.log(\"handleCountryChanged\",country);\r\n        this.setState({selectedCountry: country});\r\n    }\r\n\r\n    render() {\r\n        const {coronadata} = this.state;\r\n        if(!coronadata){return null;}\r\n        let lDate = latestDate(coronadata);\r\n        let selectedCountry = this.state.selectedCountry;\r\n\r\n        return (\r\n            <div>\r\n                <Layout style={{ height: 920 }}>\r\n                    <Layout>\r\n                        <Sider width={300} style={{backgroundColor:'#eee'}}>\r\n                            <Content style={{ height: 900 }}>\r\n                                <View1 data={coronadata} onCountryChanged={this.handleCountryChanged}/>\r\n                            </Content>\r\n                        </Sider>\r\n                        <Layout style={{ height: 900 }}>\r\n                            <Content style={{ height: 500 }}>\r\n                                <View7 data={coronadata} selectedCountry={this.state.selectedCountry}\n                                    onCountryChanged={this.handleCountryChanged}/>\n                            </Content>\r\n                            <Content style={{ height: 300 }}>\r\n                                <View3 data={coronadata} selectedCountry={this.state.selectedCountry}/>\r\n                            </Content>\r\n                        </Layout>\r\n\r\n                        <Sider width={400} style={{backgroundColor:'#eee'}}>\r\n                            <View2 data={coronadata} selectedCountry={selectedCountry} lDate={lDate}/>\r\n                        </Sider>\r\n                    </Layout>\r\n                </Layout>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n//                            <Tabs  type=\"card\">\r\n//\r\n//\r\n//                                <TabPane tab=\"World\" key=\"1\">\r\n//                                    <Content>\r\n//                                            <Row id=\"controlpanel\" >\r\n//                                                <Col span={3}>\r\n//                                                    <div id=\"play\"></div>\r\n//                                                    <div><select id=\"datatype\">\r\n//                                                      <option id='datadeaths' defaultValue value=\"deaths\">deaths</option>\r\n//                                                      <option value=\"active\">active</option>\r\n//                                                      <option value=\"recovered\">recovered</option>\r\n//                                                    </select></div>\r\n//                                                </Col>\r\n//                                                <Col span={21}><div id=\"dateslider\"></div></Col>\r\n//                                            </Row>\r\n//                                        <View7 data={coronadata}/>\r\n//                                    </Content>\r\n//                                </TabPane>\r\n//\r\n//                                <TabPane tab=\"US\" key=\"2\">\r\n//\r\n//                                </TabPane>\r\n//\r\n//                                <TabPane tab=\"China\" key=\"3\">\r\n//\r\n//                                </TabPane>\r\n//\r\n//                            </Tabs>\r\n\r\n\r\n\r\n//                                <TabPane tab=\"Bubble\" key=\"2\">\r\n//                                    <div id=\"yearslider\"></div>\r\n//                                    <div id=\"yearplay\"></div>\r\n//                                    <View6 data={coronadata}/>\r\n//                                </TabPane>\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'antd/dist/antd.css';\r\nimport Dashboard from './Dashboard';\r\n\r\nReactDOM.render(<Dashboard />, document.getElementById('root'));\r\n"],"sourceRoot":""}